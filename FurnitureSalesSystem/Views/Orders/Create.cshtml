@model FurnitureSalesSystem.Models.ViewModels.OrderCreateViewModel
@using Microsoft.AspNetCore.Mvc.Rendering
@using X.PagedList
@{
    bool isEdit = Model.OrderId.HasValue;
    ViewData["Title"] = isEdit ? "Cập nhật đơn hàng" : "Tạo đơn hàng";
}

<div class="bg-white shadow-md rounded-lg p-6 border border-gray-200">
    <div class="bg-gray-100 px-6 py-4 rounded-t-lg border-b border-gray-300">
        <h1 class="text-xl font-bold text-gray-800">@(isEdit ? "Cập nhật đơn hàng" : "Tạo đơn hàng")</h1>
    </div>
    <div class="p-6">
        <form asp-action="@(isEdit ? "Edit" : "Create")" asp-route-id="@Model.OrderId" method="post">
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <!-- B1: Thông tin khách hàng -->
                <div class="col-span-2">
                    <h2 class="text-lg font-semibold mb-2 text-gray-700">1. Thông tin khách hàng</h2>
                    <div class="flex flex-wrap gap-4 mb-4">
                        <div class="w-full md:w-1/3">
                            <label class="block text-sm font-medium text-gray-700 mb-1">Khách hàng <span class="text-red-600">*</span></label>
                            <select asp-for="CustomerId"
                                    asp-items="ViewBag.CustomerList"
                                    onchange="updateCustomerInfo(this.value)"
                                    class="form-select w-full rounded-lg border-gray-300 p-2">
                                <option value="">-- Chọn khách hàng --</option>
                            </select>
                            <span asp-validation-for="CustomerId" class="text-red-500 text-sm"></span>
                        </div>
                    </div>
                    <div class="flex flex-wrap gap-4">
                        <div class="w-full md:w-1/3">
                            <label class="block text-sm font-medium text-gray-700 mb-1">Họ tên</label>
                            <input id="customer-name"
                                   name="CustomerName"
                                   value="@Model.CustomerName"
                                   class="form-input w-full rounded-lg border-gray-300 p-2 bg-gray-50" />
                        </div>
                        <div class="w-full md:w-1/3">
                            <label class="block text-sm font-medium text-gray-700 mb-1">Số điện thoại</label>
                            <input id="customer-phone"
                                   name="CustomerPhone"
                                   value="@Model.CustomerPhone"
                                   class="form-input w-full rounded-lg border-gray-300 p-2 bg-gray-50" />
                        </div>
                        <div class="w-full md:w-1/3">
                            <label class="block text-sm font-medium text-gray-700 mb-1">Địa chỉ</label>
                            <input id="customer-address"
                                   name="CustomerAddress"
                                   value="@Model.CustomerAddress"
                                   class="form-input w-full rounded-lg border-gray-300 p-2 bg-gray-50" />
                        </div>
                    </div>
                </div>

                <!-- B2: Sản phẩm -->
                <div class="col-span-2">
                    <h2 class="text-lg font-semibold mb-2 text-gray-700">2. Danh sách sản phẩm</h2>
                    <div id="product-container">
                        @await Html.PartialAsync("_ProductListPartial", Model.Products.ToPagedList(1, 8))
                    </div>
                    <table class="w-full border text-sm" id="products-table">
                        <thead class="bg-gray-100">
                            <tr>
                                <th class="p-2">Sản phẩm</th>
                                <th class="p-2">Đơn giá</th>
                                <th class="p-2">Số lượng</th>
                                <th class="p-2">Thành tiền</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody id="product-items">
                            @for (int i = 0; i < Model.Items.Count; i++)
                            {
                                var item = Model.Items[i];
                                var product = Model.Products.FirstOrDefault(p => p.Id == item.ProductId);
                                <tr>
                                    <td class="p-2">@product?.Name</td>
                                    <td class="p-2">@item.UnitPrice.ToString("N0")</td>
                                    <td class="p-2">
                                        <input type="number" name="Items[@i].Quantity" value="@item.Quantity" class="form-input" oninput="updateTotal()" />
                                        <input type="hidden" name="Items[@i].ProductId" value="@item.ProductId" />
                                        <input type="hidden" name="Items[@i].UnitPrice" value="@item.UnitPrice" />
                                    </td>
                                    <td class="p-2">@((item.Quantity * item.UnitPrice).ToString("N0"))</td>
                                    <td class="p-2">
                                        <button type="button" class="text-red-500" onclick="this.closest('tr').remove(); updateTotal()">❌</button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                    <div class="mt-2 font-semibold">Tổng tiền: <span id="total-amount">0</span> ₫</div>
                </div>

                <!-- B3: Tuỳ chọn đơn hàng -->
                <div class="col-span-2">
                    <h2 class="text-lg font-semibold mb-2 text-gray-700">3. Tuỳ chọn đơn hàng</h2>
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-4">
                        <div>
                            <label class="block mb-1">Ghi chú nội bộ:</label>
                            <textarea asp-for="InternalNote" class="form-textarea w-full border rounded-lg p-2 h-32"></textarea>
                        </div>
                        <div>
                            <label class="block mb-1">Ghi chú cho khách:</label>
                            <textarea asp-for="CustomerNote" class="form-textarea w-full border rounded-lg p-2 h-32"></textarea>
                        </div>
                    </div>

                    <div class="mb-4">
                        <label class="block text-sm font-medium mb-1">Trạng thái đơn hàng:</label>

                        <span class="form-text w-full p-2 border rounded-lg inline-block md:w-1/3 bg-gray-100 font-semibold text-green-700">
                            Đã xác nhận
                        </span>

                        <input type="hidden" asp-for="Status" value="Confirmed" />
                    </div>
                </div>

                <!-- B4: Thông tin hệ thống -->
                <div class="col-span-2">
                    <h2 class="text-lg font-semibold mb-2 text-gray-700">4. Thông tin hệ thống</h2>
                    <p>Ngày tạo: @DateTime.Now.ToString("dd/MM/yyyy HH:mm")</p>
                    <p>Người tạo: <strong>@User.Identity.Name</strong></p>
                </div>

                <!-- B5: Nút submit -->
                <div class="col-span-2 flex gap-4">
                    <button type="submit" class="bg-green-600 text-white px-6 py-2 rounded-lg hover:bg-green-700 transition">
                        @(isEdit ? "Cập nhật đơn hàng" : "Tạo đơn hàng")
                    </button>
                    <a asp-action="Index" class="bg-gray-400 text-white px-6 py-2 rounded-lg hover:bg-gray-500 transition">Hủy</a>
                </div>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        let products = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.Products));
        let customers = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.Customers));

        let itemIndex = @Model.Items.Count;

        document.addEventListener("DOMContentLoaded", function () {
            setupPaginationAjax();
            bindAddToOrder();
            updateTotal();
        });

        function updateCustomerInfo(id) {
            const customer = customers.find(c => c.Id == id);
            if (customer) {
                document.getElementById("customer-name").value = customer.FullName;
                document.getElementById("customer-address").value = customer.Address;
                document.getElementById("customer-phone").value = customer.Phone;
            }
        }

        function setupPaginationAjax() {
            document.querySelectorAll("#product-container .pagination a").forEach(link => {
                link.addEventListener("click", function (e) {
                    e.preventDefault();
                    const url = this.href;
                    fetch(url)
                        .then(res => res.text())
                        .then(html => {
                            document.getElementById("product-container").innerHTML = html;
                            setupPaginationAjax();
                            bindAddToOrder();
                        });
                });
            });
        }

        function bindAddToOrder() {
            document.querySelectorAll(".add-to-order").forEach(btn => {
                btn.removeEventListener("click", addToOrderHandler);
                btn.addEventListener("click", addToOrderHandler);
            });
        }

        function addToOrderHandler(e) {
            const btn = e.currentTarget;
            const id = btn.dataset.id;
            const name = btn.dataset.name;
            const price = parseFloat(btn.dataset.price);
            const stock = parseInt(btn.dataset.stock);

            addProductRow(id, name, price, stock);
        }

                function addProductRow(productId, productName, price, stock) {
            const tbody = document.getElementById("product-items");
            const existingRow = Array.from(tbody.children).find(row => {
                const input = row.querySelector(`input[name$=".ProductId"]`);
                return input && input.value == productId;
            });

            if (existingRow) {
                const qtyInput = existingRow.querySelector(`input[name$=".Quantity"]`);
                let newQty = parseInt(qtyInput.value) + 1;
                if (newQty > stock) {
                    alert(`Số lượng tồn kho không đủ! Chỉ còn ${stock} sản phẩm.`);
                    return;
                }
                qtyInput.value = newQty;
                updateTotal();
                return;
            }

            const row = document.createElement("tr");
            const currentIndex = itemIndex++;

            const nameTd = tdWrap(document.createTextNode(productName));
            const priceTd = tdWrap(document.createTextNode(price.toLocaleString()));

            const quantityInput = document.createElement("input");
            quantityInput.type = "number";
            quantityInput.name = `Items[${currentIndex}].Quantity`;
            quantityInput.classList.add("form-input");
            quantityInput.value = 1;
            quantityInput.min = 1;
            quantityInput.max = stock;
            quantityInput.oninput = function () {
                if (parseInt(this.value) > stock) {
                    alert(`Số lượng tồn kho không đủ! Chỉ còn ${stock} sản phẩm.`);
                    this.value = stock;
                }
                updateTotal();
            };

            const hiddenId = document.createElement("input");
            hiddenId.type = "hidden";
            hiddenId.name = `Items[${currentIndex}].ProductId`;
            hiddenId.value = productId;

            const hiddenPrice = document.createElement("input");
            hiddenPrice.type = "hidden";
            hiddenPrice.name = `Items[${currentIndex}].UnitPrice`;
            hiddenPrice.value = price;

            const quantityTd = tdWrap(quantityInput);
            quantityTd.appendChild(hiddenId);
            quantityTd.appendChild(hiddenPrice);

            const totalTd = document.createElement("td");
            totalTd.classList.add("p-2");
            totalTd.innerText = price.toLocaleString();

            const removeBtn = document.createElement("button");
            removeBtn.type = "button";
            removeBtn.innerText = "❌";
            removeBtn.classList.add("text-red-500");
            removeBtn.onclick = () => {
                tbody.removeChild(row);
                updateTotal();
            };
            const removeTd = tdWrap(removeBtn);

            row.appendChild(nameTd);
            row.appendChild(priceTd);
            row.appendChild(quantityTd);
            row.appendChild(totalTd);
            row.appendChild(removeTd);

            tbody.appendChild(row);
            updateTotal();
        }



        function tdWrap(elem) {
            const td = document.createElement("td");
            td.classList.add("p-2");
            td.appendChild(elem);
            return td;
        }

        function updateTotal() {
            let total = 0;
            document.querySelectorAll("#product-items tr").forEach(row => {
                const qty = parseInt(row.querySelector('input[name$=".Quantity"]').value || 0);
                const price = parseFloat(row.querySelector('input[name$=".UnitPrice"]').value || 0);
                const totalCell = row.children[3];
                const rowTotal = qty * price;
                totalCell.innerText = rowTotal.toLocaleString();
                total += rowTotal;
            });
            document.getElementById("total-amount").innerText = total.toLocaleString();
        }
    </script>
}
